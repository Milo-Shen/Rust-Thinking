pub fn lifecycle() {
    // 生命周期标注语法
    // 生命周期标注并不会改变任何引用的实际作用域
    // 在通过函数签名指定生命周期参数时，我们并没有改变传入引用或者返回引用的真实生命周期，而是告诉编译器当不满足此约束条件时，就拒绝编译通过

    // 函数签名中的生命周期标注
    fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
        if x.len() > y.len() {
            x
        } else {
            y
        }
    }

    // 需要注意的点如下：
    // 1. 和泛型一样，使用生命周期参数，需要先声明 <'a>
    // 2. x、y 和返回值至少活得和 'a 一样久(因为返回值要么是 x，要么是 y)
}
