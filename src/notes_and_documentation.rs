pub fn notes_and_documentation() {
    // 注释的种类
    // 在 Rust 中，注释分为三类：
    // 1. 代码注释，用于说明某一块代码的功能，读者往往是同一个项目的协作开发者
    // 2. 文档注释，支持 Markdown，对项目描述、公共 API 等用户关心的功能进行介绍，同时还能提供示例代码，目标读者往往是想要了解你项目的人
    // 3. 包和模块注释，严格来说这也是文档注释中的一种，它主要用于说明当前包和模块的功能，方便用户迅速了解一个项目
    // 通过这些注释，实现了 Rust 极其优秀的文档化支持，甚至你还能在文档注释中写测试用例，省去了单独写测试用例的环节，我直呼好家伙！

    // 文档注释
    // 当查看一个 crates.io 上的包时，往往需要通过它提供的文档来浏览相关的功能特性、使用方式，这种文档就是通过文档注释实现的。
    // Rust 提供了 cargo doc 的命令，可以用于把这些文档注释转换成 HTML 网页文件，最终展示给用户浏览，这样用户就知道这个包是做什么的以及该如何使用。

    /// `add_one` 将指定值加1
    ///
    /// # Examples
    ///
    /// ```
    /// let arg = 5;
    /// let answer = my_crate::add_one(arg);
    ///
    /// assert_eq!(6, answer);
    /// ```
    pub fn add_one(x: i32) -> i32 {
        x + 1
    }

    // 以上代码有几点需要注意：
    // 1. 文档注释需要位于 lib 类型的包中，例如 src/lib.rs 中
    // 2. 文档注释可以使用 markdown语法！例如 # Examples 的标题，以及代码块高亮
    // 3. 被注释的对象需要使用 pub 对外可见，记住：文档注释是给用户看的，内部实现细节不应该被暴露出去

    // 文档块注释 /** ... */
    /** `add_two` 将指定值加2
    ```
    let arg = 5;
    let answer = my_crate::add_two(arg);

    assert_eq!(7, answer);
    ```
    */
    pub fn add_two(x: i32) -> i32 {
        x + 2
    }

    // 常用文档标题
    // 之前我们见到了在文档注释中该如何使用 markdown，其中包括 # Examples 标题。除了这个标题，还有一些常用的，你可以在项目中酌情使用：
    // 1. Panics：函数可能会出现的异常状况，这样调用函数的人就可以提前规避
    // 2. Errors：描述可能出现的错误及什么情况会导致错误，有助于调用者针对不同的错误采取不同的处理方式
    // 3. Safety：如果函数使用 unsafe 代码，那么调用者就需要注意一些使用条件，以确保 unsafe 代码块的正常工作
}
